<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js继承</title>
      <link href="/2022/04/20/js-ji-cheng/"/>
      <url>/2022/04/20/js-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="js继承"><a href="#js继承" class="headerlink" title="js继承"></a>js继承</h1><h5 id="继承可以使子类具有父类的各种方法和属性"><a href="#继承可以使子类具有父类的各种方法和属性" class="headerlink" title="继承可以使子类具有父类的各种方法和属性"></a>继承可以使子类具有父类的各种方法和属性</h5><pre><code class="js">//父类function Father(){    this.name =  "tom";    this.arr = [1,2]    thi.say = function(){        console.log("say");    }}Father.prototype.eat = function(){    console.log("eat")}</code></pre><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><pre><code class="js">function father(){    this.name = name || tom;    thi.say = function(){        console.log("say");    }}function child(){    this.age  = “18”}//父类的实例作为子类的原型child.prototype = new father();let c1 = new Child();let c2 = new Child();c1.push(3);实例化原型对象的属性是引用类型时，会公用一个内存空间(数据污染)</code></pre><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><pre><code class="js">// 利用call改变this指向function Child(){    Father.call(this);    this.age = "18";}let c1 = new Child();c1只能继承Father本身的属性和方法 不能继承Father原型对象上的属性和方法</code></pre><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><pre><code>//结合原型链继承和构造函数继承Child.prototype = new Father()function Child(){    Father.call(this);    this.age = "18"}//会实例化开两次父类对象 造成性能上的浪费</code></pre><h3 id="组合继承-优化"><a href="#组合继承-优化" class="headerlink" title="组合继承(优化)"></a>组合继承(优化)</h3><pre><code>Child,prototype = Father.prototypeChild,prototype.constructor = Child()function Child(){    Father.call(this);    this.age = "18"}//实例化只调用一次 但是父类和子类的constructor指向同一处</code></pre><h3 id="组合继承-再优化"><a href="#组合继承-再优化" class="headerlink" title="组合继承(再优化)"></a>组合继承(再优化)</h3><pre><code>Child,prototype = Object.create(Father.prototype)function Child(){    Father.call(this);    this.age = "18"}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/26/hello-world/"/>
      <url>/2021/10/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
